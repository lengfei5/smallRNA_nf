params {
    outdir    = "."
    reads     = "ngs_raw/*.bam"
    adapter   = "AGATCGGAAGAGCACACGTCTGAACTCCAGTCACNNNNNNATCTCGTATGCCGTCTTCTGCTTG"
    adapterMin = 5
    demultiplexWithsRBC = false
    barcodes = "none"
    trim5 = 4
    trim3 = 4
    adapterER = 0.1
    minLength = 18
    maxLength = 30 //turn off with -1
    minAlign  = 18
    maxMultialign = -1
    genome    = false
    contamination = "none"
    //spikeIn = "/groups/cochella/jiwang/scripts/smallRNA_nf/genome/spikeIn.fa" // specify the spikein.fa which have double UMI barcodes
    spikeIn = false
    gtf = false
    gtfNoSplit = false
    //gtf = "/groups/cochella/jiwang/scripts/smallRNA_nf/annotation/WBcel235.mirBase.gtf" // gtf file for double hairpin to be splitted, i.e. gtf from mirBase
    //gtfNoSplit = "/groups/cochella/jiwang/scripts/smallRNA_nf/annotation/cel_ens_piRNA.gtf" // gtf ready to use, e.g splitted gtf for miRNA or piRNAs
    tailFraction = 0.12
    cpus = 8
    memPerCPUSort = '3G'
}

process {

    errorStrategy = 'retry'
    maxRetries = 3

    $buildTailorIndex {
        memory = { 16.GB * task.attempt }
    }

    $alignContamination {
        cpus = "${params.cpus}"
    }

    $align {
        cpus = "${params.cpus}"
    }

    $alignStat {
        cpus = "${params.cpus}"
    }
}


profiles {

    standard {

        process {

            executor = 'slurm'
            clusterOptions = {
                    if ( task.attempt == 1 ) {
                        '--qos=short'
                    } else {
                        '--qos=medium'
                    }
                }
            scratch = true

            $assignFeat {

                memory = { 16.GB * task.attempt }
                clusterOptions = {
                    if ( task.attempt == 1 ) {
                        '--qos=medium'
                    } else {
                        '--qos=long'
                    }
                }
            }
        }
    }

    sge {
        process.executor = 'sge'
        process.queue = 'public.q'
        process.penv = 'smp'
    }

    local {
        process.executor = 'local'
    }
}
